// *** WARNING: this file was generated by Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsIam
{
    [AwsIamResourceType("aws-iam:index:EKSRole")]
    public partial class EKSRole : Pulumi.ComponentResource
    {
        /// <summary>
        /// ARN of IAM role.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// Name of IAM role.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Path of IAM role.
        /// </summary>
        [Output("path")]
        public Output<string> Path { get; private set; } = null!;

        /// <summary>
        /// Unique ID of IAM role.
        /// </summary>
        [Output("uniqueId")]
        public Output<string> UniqueId { get; private set; } = null!;


        /// <summary>
        /// Create a EKSRole resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public EKSRole(string name, EKSRoleArgs? args = null, ComponentResourceOptions? options = null)
            : base("aws-iam:index:EKSRole", name, args ?? new EKSRoleArgs(), MakeResourceOptions(options, ""), remote: true)
        {
        }

        private static ComponentResourceOptions MakeResourceOptions(ComponentResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new ComponentResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = ComponentResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
    }

    public sealed class EKSRoleArgs : Pulumi.ResourceArgs
    {
        [Input("clusterServiceAccounts")]
        private InputMap<ImmutableArray<string>>? _clusterServiceAccounts;

        /// <summary>
        /// EKS cluster and k8s ServiceAccount pairs. Each EKS cluster can have multiple k8s ServiceAccount. See README for details
        /// </summary>
        public InputMap<ImmutableArray<string>> ClusterServiceAccounts
        {
            get => _clusterServiceAccounts ?? (_clusterServiceAccounts = new InputMap<ImmutableArray<string>>());
            set => _clusterServiceAccounts = value;
        }

        /// <summary>
        /// Whether policies should be detached from this role when destroying.
        /// </summary>
        [Input("forceDetachPolicies")]
        public Input<bool>? ForceDetachPolicies { get; set; }

        /// <summary>
        /// Maximum CLI/API session duration in seconds between 3600 and 43200.
        /// </summary>
        [Input("maxSessionDuration")]
        public Input<int>? MaxSessionDuration { get; set; }

        [Input("providerUrlSaPairs")]
        private InputMap<ImmutableArray<string>>? _providerUrlSaPairs;

        /// <summary>
        /// OIDC provider URL and k8s ServiceAccount pairs. If the assume role policy requires a mix of EKS clusters and other OIDC providers then this can be used
        /// </summary>
        public InputMap<ImmutableArray<string>> ProviderUrlSaPairs
        {
            get => _providerUrlSaPairs ?? (_providerUrlSaPairs = new InputMap<ImmutableArray<string>>());
            set => _providerUrlSaPairs = value;
        }

        [Input("role")]
        public Input<Inputs.RoleArgs>? Role { get; set; }

        [Input("rolePolicyArns")]
        private InputList<string>? _rolePolicyArns;

        /// <summary>
        /// ARNs of any policies to attach to the IAM role.
        /// </summary>
        public InputList<string> RolePolicyArns
        {
            get => _rolePolicyArns ?? (_rolePolicyArns = new InputList<string>());
            set => _rolePolicyArns = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A map of tags to add.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public EKSRoleArgs()
        {
            ForceDetachPolicies = false;
            MaxSessionDuration = 3600;
        }
    }
}
