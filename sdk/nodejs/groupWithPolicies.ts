// *** WARNING: this file was generated by Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class GroupWithPolicies extends pulumi.ComponentResource {
    /** @internal */
    public static readonly __pulumiType = 'aws-iam:index:GroupWithPolicies';

    /**
     * Returns true if the given object is an instance of GroupWithPolicies.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GroupWithPolicies {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GroupWithPolicies.__pulumiType;
    }

    /**
     * IAM AWS account id.
     */
    public readonly awsAccountId!: pulumi.Output<string>;
    /**
     * IAM group arn.
     */
    public /*out*/ readonly groupArn!: pulumi.Output<string>;
    /**
     * IAM group name.
     */
    public /*out*/ readonly groupName!: pulumi.Output<string>;
    /**
     * List of IAM users in IAM group
     */
    public readonly groupUsers!: pulumi.Output<string[]>;

    /**
     * Create a GroupWithPolicies resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GroupWithPoliciesArgs, opts?: pulumi.ComponentResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.groupUsers === undefined) && !opts.urn) {
                throw new Error("Missing required property 'groupUsers'");
            }
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            resourceInputs["attachIamSelfManagementPolicy"] = (args ? args.attachIamSelfManagementPolicy : undefined) ?? true;
            resourceInputs["awsAccountId"] = (args ? args.awsAccountId : undefined) ?? "";
            resourceInputs["customGroupPolicies"] = args ? args.customGroupPolicies : undefined;
            resourceInputs["customGroupPolicyArns"] = args ? args.customGroupPolicyArns : undefined;
            resourceInputs["groupUsers"] = args ? args.groupUsers : undefined;
            resourceInputs["iamSelfManagementPolicyNamePrefix"] = (args ? args.iamSelfManagementPolicyNamePrefix : undefined) ?? "IAMSelfManagement-";
            resourceInputs["name"] = (args ? args.name : undefined) ?? "";
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["groupArn"] = undefined /*out*/;
            resourceInputs["groupName"] = undefined /*out*/;
        } else {
            resourceInputs["awsAccountId"] = undefined /*out*/;
            resourceInputs["groupArn"] = undefined /*out*/;
            resourceInputs["groupName"] = undefined /*out*/;
            resourceInputs["groupUsers"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GroupWithPolicies.__pulumiType, name, resourceInputs, opts, true /*remote*/);
    }
}

/**
 * The set of arguments for constructing a GroupWithPolicies resource.
 */
export interface GroupWithPoliciesArgs {
    /**
     * Whether to attach IAM policy which allows IAM users to manage their credentials and MFA.
     */
    attachIamSelfManagementPolicy?: pulumi.Input<boolean>;
    /**
     * AWS account id to use inside IAM policies. If empty, current AWS account ID will be used.
     */
    awsAccountId?: pulumi.Input<string>;
    /**
     * List of maps of inline IAM policies to attach to IAM group. Should have `name` and `policy` keys in each element.
     */
    customGroupPolicies?: pulumi.Input<pulumi.Input<{[key: string]: pulumi.Input<string>}>[]>;
    /**
     * List of IAM policies ARNs to attach to IAM group.
     */
    customGroupPolicyArns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of IAM users to have in an IAM group which can assume the role.
     */
    groupUsers: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name prefix for IAM policy to create with IAM self-management permissions.
     */
    iamSelfManagementPolicyNamePrefix?: pulumi.Input<string>;
    /**
     * Name of IAM group.
     */
    name: pulumi.Input<string>;
    /**
     * A map of tags to add.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
