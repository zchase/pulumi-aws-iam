// *** WARNING: this file was generated by Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

export class AssumableRole extends pulumi.ComponentResource {
    /** @internal */
    public static readonly __pulumiType = 'aws-iam:index:AssumableRole';

    /**
     * Returns true if the given object is an instance of AssumableRole.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AssumableRole {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AssumableRole.__pulumiType;
    }

    public /*out*/ readonly instanceProfile!: pulumi.Output<{[key: string]: string}>;
    public readonly role!: pulumi.Output<{[key: string]: string}>;

    /**
     * Create a AssumableRole resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: AssumableRoleArgs, opts?: pulumi.ComponentResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            resourceInputs["adminRolePolicyArn"] = (args ? args.adminRolePolicyArn : undefined) ?? "arn:aws:iam::aws:policy/AdministratorAccess";
            resourceInputs["attachAdminPolicy"] = (args ? args.attachAdminPolicy : undefined) ?? false;
            resourceInputs["attachPoweruserPolicy"] = (args ? args.attachPoweruserPolicy : undefined) ?? false;
            resourceInputs["attachReadonlyPolicy"] = (args ? args.attachReadonlyPolicy : undefined) ?? false;
            resourceInputs["customRolePolicyArns"] = args ? args.customRolePolicyArns : undefined;
            resourceInputs["customRoleTrustPolicy"] = (args ? args.customRoleTrustPolicy : undefined) ?? "";
            resourceInputs["forceDetachPolicies"] = (args ? args.forceDetachPolicies : undefined) ?? false;
            resourceInputs["maxSessionDuration"] = (args ? args.maxSessionDuration : undefined) ?? 3600;
            resourceInputs["mfaAge"] = (args ? args.mfaAge : undefined) ?? 86400;
            resourceInputs["poweruserRolePolicyArn"] = (args ? args.poweruserRolePolicyArn : undefined) ?? "arn:aws:iam::aws:policy/PowerUserAccess";
            resourceInputs["readonlyRolePolicyArn"] = (args ? args.readonlyRolePolicyArn : undefined) ?? "arn:aws:iam::aws:policy/ReadOnlyAccess";
            resourceInputs["role"] = args ? (args.role ? pulumi.output(args.role).apply(inputs.roleWithMFAArgsProvideDefaults) : undefined) : undefined;
            resourceInputs["roleStsExternalIds"] = args ? args.roleStsExternalIds : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["trustedRoleActions"] = args ? args.trustedRoleActions : undefined;
            resourceInputs["trustedRoleArns"] = args ? args.trustedRoleArns : undefined;
            resourceInputs["trustedRoleServices"] = args ? args.trustedRoleServices : undefined;
            resourceInputs["instanceProfile"] = undefined /*out*/;
        } else {
            resourceInputs["instanceProfile"] = undefined /*out*/;
            resourceInputs["role"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AssumableRole.__pulumiType, name, resourceInputs, opts, true /*remote*/);
    }
}

/**
 * The set of arguments for constructing a AssumableRole resource.
 */
export interface AssumableRoleArgs {
    /**
     * Policy ARN to use for admin role.
     */
    adminRolePolicyArn?: pulumi.Input<string>;
    /**
     * Whether to attach an admin policy to a role.
     */
    attachAdminPolicy?: pulumi.Input<boolean>;
    /**
     * Whether to attach a poweruser policy to a role.
     */
    attachPoweruserPolicy?: pulumi.Input<boolean>;
    /**
     * Whether to attach a readonly policy to a role.
     */
    attachReadonlyPolicy?: pulumi.Input<boolean>;
    /**
     * List of ARNs of IAM policies to attach to IAM role.
     */
    customRolePolicyArns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A custom role trust policy.
     */
    customRoleTrustPolicy?: pulumi.Input<string>;
    /**
     * Whether policies should be detached from this role when destroying.
     */
    forceDetachPolicies?: pulumi.Input<boolean>;
    /**
     * Maximum CLI/API session duration in seconds between 3600 and 43200.
     */
    maxSessionDuration?: pulumi.Input<number>;
    /**
     * Max age of valid MFA (in seconds) for roles which require MFA.
     */
    mfaAge?: pulumi.Input<number>;
    /**
     * Policy ARN to use for poweruser role.
     */
    poweruserRolePolicyArn?: pulumi.Input<string>;
    /**
     * Policy ARN to use for readonly role.
     */
    readonlyRolePolicyArn?: pulumi.Input<string>;
    /**
     * An IAM role that requires MFA.
     */
    role?: pulumi.Input<inputs.RoleWithMFAArgs>;
    /**
     * STS ExternalId condition values to use with a role (when MFA is not required).
     */
    roleStsExternalIds?: pulumi.Input<pulumi.Input<string>[]>;
    tags?: pulumi.Input<inputs.TagsArgs>;
    /**
     * Actions of STS.
     */
    trustedRoleActions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * ARNs of AWS entities who can assume these roles.
     */
    trustedRoleArns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * AWS Services that can assume these roles.
     */
    trustedRoleServices?: pulumi.Input<pulumi.Input<string>[]>;
}
