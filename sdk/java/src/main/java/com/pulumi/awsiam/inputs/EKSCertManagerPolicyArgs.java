// *** WARNING: this file was generated by Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsiam.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The Cert Manager IAM policy to attach to the role.
 * 
 */
public final class EKSCertManagerPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final EKSCertManagerPolicyArgs Empty = new EKSCertManagerPolicyArgs();

    /**
     * Determines whether to attach the Cert Manager IAM policy to the role.
     * 
     */
    @Import(name="attach", required=true)
    private Output<Boolean> attach;

    /**
     * @return Determines whether to attach the Cert Manager IAM policy to the role.
     * 
     */
    public Output<Boolean> attach() {
        return this.attach;
    }

    /**
     * Route53 hosted zone ARNs to allow Cert manager to manage records. If not provided,
     * the default ARN &#34;arn:aws:route53:::hostedzone/*&#34; will be applied.
     * 
     */
    @Import(name="hostedZoneArns")
    private @Nullable Output<List<String>> hostedZoneArns;

    /**
     * @return Route53 hosted zone ARNs to allow Cert manager to manage records. If not provided,
     * the default ARN &#34;arn:aws:route53:::hostedzone/*&#34; will be applied.
     * 
     */
    public Optional<Output<List<String>>> hostedZoneArns() {
        return Optional.ofNullable(this.hostedZoneArns);
    }

    private EKSCertManagerPolicyArgs() {}

    private EKSCertManagerPolicyArgs(EKSCertManagerPolicyArgs $) {
        this.attach = $.attach;
        this.hostedZoneArns = $.hostedZoneArns;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EKSCertManagerPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EKSCertManagerPolicyArgs $;

        public Builder() {
            $ = new EKSCertManagerPolicyArgs();
        }

        public Builder(EKSCertManagerPolicyArgs defaults) {
            $ = new EKSCertManagerPolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param attach Determines whether to attach the Cert Manager IAM policy to the role.
         * 
         * @return builder
         * 
         */
        public Builder attach(Output<Boolean> attach) {
            $.attach = attach;
            return this;
        }

        /**
         * @param attach Determines whether to attach the Cert Manager IAM policy to the role.
         * 
         * @return builder
         * 
         */
        public Builder attach(Boolean attach) {
            return attach(Output.of(attach));
        }

        /**
         * @param hostedZoneArns Route53 hosted zone ARNs to allow Cert manager to manage records. If not provided,
         * the default ARN &#34;arn:aws:route53:::hostedzone/*&#34; will be applied.
         * 
         * @return builder
         * 
         */
        public Builder hostedZoneArns(@Nullable Output<List<String>> hostedZoneArns) {
            $.hostedZoneArns = hostedZoneArns;
            return this;
        }

        /**
         * @param hostedZoneArns Route53 hosted zone ARNs to allow Cert manager to manage records. If not provided,
         * the default ARN &#34;arn:aws:route53:::hostedzone/*&#34; will be applied.
         * 
         * @return builder
         * 
         */
        public Builder hostedZoneArns(List<String> hostedZoneArns) {
            return hostedZoneArns(Output.of(hostedZoneArns));
        }

        /**
         * @param hostedZoneArns Route53 hosted zone ARNs to allow Cert manager to manage records. If not provided,
         * the default ARN &#34;arn:aws:route53:::hostedzone/*&#34; will be applied.
         * 
         * @return builder
         * 
         */
        public Builder hostedZoneArns(String... hostedZoneArns) {
            return hostedZoneArns(List.of(hostedZoneArns));
        }

        public EKSCertManagerPolicyArgs build() {
            $.attach = Objects.requireNonNull($.attach, "expected parameter 'attach' to be non-null");
            return $;
        }
    }

}
