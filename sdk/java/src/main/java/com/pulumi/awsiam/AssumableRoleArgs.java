// *** WARNING: this file was generated by Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsiam;

import com.pulumi.awsiam.inputs.RoleWithMFAArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AssumableRoleArgs extends com.pulumi.resources.ResourceArgs {

    public static final AssumableRoleArgs Empty = new AssumableRoleArgs();

    /**
     * Whether to attach an admin policy to a role.
     * 
     */
    @Import(name="attachAdminPolicy")
    private @Nullable Output<Boolean> attachAdminPolicy;

    /**
     * @return Whether to attach an admin policy to a role.
     * 
     */
    public Optional<Output<Boolean>> attachAdminPolicy() {
        return Optional.ofNullable(this.attachAdminPolicy);
    }

    /**
     * Whether to attach a poweruser policy to a role.
     * 
     */
    @Import(name="attachPoweruserPolicy")
    private @Nullable Output<Boolean> attachPoweruserPolicy;

    /**
     * @return Whether to attach a poweruser policy to a role.
     * 
     */
    public Optional<Output<Boolean>> attachPoweruserPolicy() {
        return Optional.ofNullable(this.attachPoweruserPolicy);
    }

    /**
     * Whether to attach a readonly policy to a role.
     * 
     */
    @Import(name="attachReadonlyPolicy")
    private @Nullable Output<Boolean> attachReadonlyPolicy;

    /**
     * @return Whether to attach a readonly policy to a role.
     * 
     */
    public Optional<Output<Boolean>> attachReadonlyPolicy() {
        return Optional.ofNullable(this.attachReadonlyPolicy);
    }

    /**
     * A custom role trust policy.
     * 
     */
    @Import(name="customRoleTrustPolicy")
    private @Nullable Output<String> customRoleTrustPolicy;

    /**
     * @return A custom role trust policy.
     * 
     */
    public Optional<Output<String>> customRoleTrustPolicy() {
        return Optional.ofNullable(this.customRoleTrustPolicy);
    }

    /**
     * Whether policies should be detached from this role when destroying.
     * 
     */
    @Import(name="forceDetachPolicies")
    private @Nullable Output<Boolean> forceDetachPolicies;

    /**
     * @return Whether policies should be detached from this role when destroying.
     * 
     */
    public Optional<Output<Boolean>> forceDetachPolicies() {
        return Optional.ofNullable(this.forceDetachPolicies);
    }

    /**
     * Maximum CLI/API session duration in seconds between 3600 and 43200.
     * 
     */
    @Import(name="maxSessionDuration")
    private @Nullable Output<Integer> maxSessionDuration;

    /**
     * @return Maximum CLI/API session duration in seconds between 3600 and 43200.
     * 
     */
    public Optional<Output<Integer>> maxSessionDuration() {
        return Optional.ofNullable(this.maxSessionDuration);
    }

    /**
     * Max age of valid MFA (in seconds) for roles which require MFA.
     * 
     */
    @Import(name="mfaAge")
    private @Nullable Output<Integer> mfaAge;

    /**
     * @return Max age of valid MFA (in seconds) for roles which require MFA.
     * 
     */
    public Optional<Output<Integer>> mfaAge() {
        return Optional.ofNullable(this.mfaAge);
    }

    /**
     * An IAM role that requires MFA.
     * 
     */
    @Import(name="role")
    private @Nullable Output<RoleWithMFAArgs> role;

    /**
     * @return An IAM role that requires MFA.
     * 
     */
    public Optional<Output<RoleWithMFAArgs>> role() {
        return Optional.ofNullable(this.role);
    }

    /**
     * STS ExternalId condition values to use with a role (when MFA is not required).
     * 
     */
    @Import(name="roleStsExternalIds")
    private @Nullable Output<List<String>> roleStsExternalIds;

    /**
     * @return STS ExternalId condition values to use with a role (when MFA is not required).
     * 
     */
    public Optional<Output<List<String>>> roleStsExternalIds() {
        return Optional.ofNullable(this.roleStsExternalIds);
    }

    /**
     * A map of tags to add.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return A map of tags to add.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Actions of STS.
     * 
     */
    @Import(name="trustedRoleActions")
    private @Nullable Output<List<String>> trustedRoleActions;

    /**
     * @return Actions of STS.
     * 
     */
    public Optional<Output<List<String>>> trustedRoleActions() {
        return Optional.ofNullable(this.trustedRoleActions);
    }

    /**
     * ARNs of AWS entities who can assume these roles.
     * 
     */
    @Import(name="trustedRoleArns")
    private @Nullable Output<List<String>> trustedRoleArns;

    /**
     * @return ARNs of AWS entities who can assume these roles.
     * 
     */
    public Optional<Output<List<String>>> trustedRoleArns() {
        return Optional.ofNullable(this.trustedRoleArns);
    }

    /**
     * AWS Services that can assume these roles.
     * 
     */
    @Import(name="trustedRoleServices")
    private @Nullable Output<List<String>> trustedRoleServices;

    /**
     * @return AWS Services that can assume these roles.
     * 
     */
    public Optional<Output<List<String>>> trustedRoleServices() {
        return Optional.ofNullable(this.trustedRoleServices);
    }

    private AssumableRoleArgs() {}

    private AssumableRoleArgs(AssumableRoleArgs $) {
        this.attachAdminPolicy = $.attachAdminPolicy;
        this.attachPoweruserPolicy = $.attachPoweruserPolicy;
        this.attachReadonlyPolicy = $.attachReadonlyPolicy;
        this.customRoleTrustPolicy = $.customRoleTrustPolicy;
        this.forceDetachPolicies = $.forceDetachPolicies;
        this.maxSessionDuration = $.maxSessionDuration;
        this.mfaAge = $.mfaAge;
        this.role = $.role;
        this.roleStsExternalIds = $.roleStsExternalIds;
        this.tags = $.tags;
        this.trustedRoleActions = $.trustedRoleActions;
        this.trustedRoleArns = $.trustedRoleArns;
        this.trustedRoleServices = $.trustedRoleServices;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AssumableRoleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AssumableRoleArgs $;

        public Builder() {
            $ = new AssumableRoleArgs();
        }

        public Builder(AssumableRoleArgs defaults) {
            $ = new AssumableRoleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param attachAdminPolicy Whether to attach an admin policy to a role.
         * 
         * @return builder
         * 
         */
        public Builder attachAdminPolicy(@Nullable Output<Boolean> attachAdminPolicy) {
            $.attachAdminPolicy = attachAdminPolicy;
            return this;
        }

        /**
         * @param attachAdminPolicy Whether to attach an admin policy to a role.
         * 
         * @return builder
         * 
         */
        public Builder attachAdminPolicy(Boolean attachAdminPolicy) {
            return attachAdminPolicy(Output.of(attachAdminPolicy));
        }

        /**
         * @param attachPoweruserPolicy Whether to attach a poweruser policy to a role.
         * 
         * @return builder
         * 
         */
        public Builder attachPoweruserPolicy(@Nullable Output<Boolean> attachPoweruserPolicy) {
            $.attachPoweruserPolicy = attachPoweruserPolicy;
            return this;
        }

        /**
         * @param attachPoweruserPolicy Whether to attach a poweruser policy to a role.
         * 
         * @return builder
         * 
         */
        public Builder attachPoweruserPolicy(Boolean attachPoweruserPolicy) {
            return attachPoweruserPolicy(Output.of(attachPoweruserPolicy));
        }

        /**
         * @param attachReadonlyPolicy Whether to attach a readonly policy to a role.
         * 
         * @return builder
         * 
         */
        public Builder attachReadonlyPolicy(@Nullable Output<Boolean> attachReadonlyPolicy) {
            $.attachReadonlyPolicy = attachReadonlyPolicy;
            return this;
        }

        /**
         * @param attachReadonlyPolicy Whether to attach a readonly policy to a role.
         * 
         * @return builder
         * 
         */
        public Builder attachReadonlyPolicy(Boolean attachReadonlyPolicy) {
            return attachReadonlyPolicy(Output.of(attachReadonlyPolicy));
        }

        /**
         * @param customRoleTrustPolicy A custom role trust policy.
         * 
         * @return builder
         * 
         */
        public Builder customRoleTrustPolicy(@Nullable Output<String> customRoleTrustPolicy) {
            $.customRoleTrustPolicy = customRoleTrustPolicy;
            return this;
        }

        /**
         * @param customRoleTrustPolicy A custom role trust policy.
         * 
         * @return builder
         * 
         */
        public Builder customRoleTrustPolicy(String customRoleTrustPolicy) {
            return customRoleTrustPolicy(Output.of(customRoleTrustPolicy));
        }

        /**
         * @param forceDetachPolicies Whether policies should be detached from this role when destroying.
         * 
         * @return builder
         * 
         */
        public Builder forceDetachPolicies(@Nullable Output<Boolean> forceDetachPolicies) {
            $.forceDetachPolicies = forceDetachPolicies;
            return this;
        }

        /**
         * @param forceDetachPolicies Whether policies should be detached from this role when destroying.
         * 
         * @return builder
         * 
         */
        public Builder forceDetachPolicies(Boolean forceDetachPolicies) {
            return forceDetachPolicies(Output.of(forceDetachPolicies));
        }

        /**
         * @param maxSessionDuration Maximum CLI/API session duration in seconds between 3600 and 43200.
         * 
         * @return builder
         * 
         */
        public Builder maxSessionDuration(@Nullable Output<Integer> maxSessionDuration) {
            $.maxSessionDuration = maxSessionDuration;
            return this;
        }

        /**
         * @param maxSessionDuration Maximum CLI/API session duration in seconds between 3600 and 43200.
         * 
         * @return builder
         * 
         */
        public Builder maxSessionDuration(Integer maxSessionDuration) {
            return maxSessionDuration(Output.of(maxSessionDuration));
        }

        /**
         * @param mfaAge Max age of valid MFA (in seconds) for roles which require MFA.
         * 
         * @return builder
         * 
         */
        public Builder mfaAge(@Nullable Output<Integer> mfaAge) {
            $.mfaAge = mfaAge;
            return this;
        }

        /**
         * @param mfaAge Max age of valid MFA (in seconds) for roles which require MFA.
         * 
         * @return builder
         * 
         */
        public Builder mfaAge(Integer mfaAge) {
            return mfaAge(Output.of(mfaAge));
        }

        /**
         * @param role An IAM role that requires MFA.
         * 
         * @return builder
         * 
         */
        public Builder role(@Nullable Output<RoleWithMFAArgs> role) {
            $.role = role;
            return this;
        }

        /**
         * @param role An IAM role that requires MFA.
         * 
         * @return builder
         * 
         */
        public Builder role(RoleWithMFAArgs role) {
            return role(Output.of(role));
        }

        /**
         * @param roleStsExternalIds STS ExternalId condition values to use with a role (when MFA is not required).
         * 
         * @return builder
         * 
         */
        public Builder roleStsExternalIds(@Nullable Output<List<String>> roleStsExternalIds) {
            $.roleStsExternalIds = roleStsExternalIds;
            return this;
        }

        /**
         * @param roleStsExternalIds STS ExternalId condition values to use with a role (when MFA is not required).
         * 
         * @return builder
         * 
         */
        public Builder roleStsExternalIds(List<String> roleStsExternalIds) {
            return roleStsExternalIds(Output.of(roleStsExternalIds));
        }

        /**
         * @param roleStsExternalIds STS ExternalId condition values to use with a role (when MFA is not required).
         * 
         * @return builder
         * 
         */
        public Builder roleStsExternalIds(String... roleStsExternalIds) {
            return roleStsExternalIds(List.of(roleStsExternalIds));
        }

        /**
         * @param tags A map of tags to add.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A map of tags to add.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param trustedRoleActions Actions of STS.
         * 
         * @return builder
         * 
         */
        public Builder trustedRoleActions(@Nullable Output<List<String>> trustedRoleActions) {
            $.trustedRoleActions = trustedRoleActions;
            return this;
        }

        /**
         * @param trustedRoleActions Actions of STS.
         * 
         * @return builder
         * 
         */
        public Builder trustedRoleActions(List<String> trustedRoleActions) {
            return trustedRoleActions(Output.of(trustedRoleActions));
        }

        /**
         * @param trustedRoleActions Actions of STS.
         * 
         * @return builder
         * 
         */
        public Builder trustedRoleActions(String... trustedRoleActions) {
            return trustedRoleActions(List.of(trustedRoleActions));
        }

        /**
         * @param trustedRoleArns ARNs of AWS entities who can assume these roles.
         * 
         * @return builder
         * 
         */
        public Builder trustedRoleArns(@Nullable Output<List<String>> trustedRoleArns) {
            $.trustedRoleArns = trustedRoleArns;
            return this;
        }

        /**
         * @param trustedRoleArns ARNs of AWS entities who can assume these roles.
         * 
         * @return builder
         * 
         */
        public Builder trustedRoleArns(List<String> trustedRoleArns) {
            return trustedRoleArns(Output.of(trustedRoleArns));
        }

        /**
         * @param trustedRoleArns ARNs of AWS entities who can assume these roles.
         * 
         * @return builder
         * 
         */
        public Builder trustedRoleArns(String... trustedRoleArns) {
            return trustedRoleArns(List.of(trustedRoleArns));
        }

        /**
         * @param trustedRoleServices AWS Services that can assume these roles.
         * 
         * @return builder
         * 
         */
        public Builder trustedRoleServices(@Nullable Output<List<String>> trustedRoleServices) {
            $.trustedRoleServices = trustedRoleServices;
            return this;
        }

        /**
         * @param trustedRoleServices AWS Services that can assume these roles.
         * 
         * @return builder
         * 
         */
        public Builder trustedRoleServices(List<String> trustedRoleServices) {
            return trustedRoleServices(Output.of(trustedRoleServices));
        }

        /**
         * @param trustedRoleServices AWS Services that can assume these roles.
         * 
         * @return builder
         * 
         */
        public Builder trustedRoleServices(String... trustedRoleServices) {
            return trustedRoleServices(List.of(trustedRoleServices));
        }

        public AssumableRoleArgs build() {
            $.attachAdminPolicy = Codegen.booleanProp("attachAdminPolicy").output().arg($.attachAdminPolicy).def(false).getNullable();
            $.attachPoweruserPolicy = Codegen.booleanProp("attachPoweruserPolicy").output().arg($.attachPoweruserPolicy).def(false).getNullable();
            $.attachReadonlyPolicy = Codegen.booleanProp("attachReadonlyPolicy").output().arg($.attachReadonlyPolicy).def(false).getNullable();
            $.customRoleTrustPolicy = Codegen.stringProp("customRoleTrustPolicy").output().arg($.customRoleTrustPolicy).def("").getNullable();
            $.forceDetachPolicies = Codegen.booleanProp("forceDetachPolicies").output().arg($.forceDetachPolicies).def(false).getNullable();
            $.maxSessionDuration = Codegen.integerProp("maxSessionDuration").output().arg($.maxSessionDuration).def(3600).getNullable();
            $.mfaAge = Codegen.integerProp("mfaAge").output().arg($.mfaAge).def(86400).getNullable();
            return $;
        }
    }

}
