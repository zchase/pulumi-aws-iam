// *** WARNING: this file was generated by Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsiam;

import com.pulumi.awsiam.inputs.EKSRolePoliciesArgs;
import com.pulumi.awsiam.inputs.EKSServiceAccountRoleArgs;
import com.pulumi.awsiam.inputs.OIDCProviderArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RoleForServiceAccountsEksArgs extends com.pulumi.resources.ResourceArgs {

    public static final RoleForServiceAccountsEksArgs Empty = new RoleForServiceAccountsEksArgs();

    /**
     * Name of the IAM condition operator to evaluate when assuming the role.
     * 
     */
    @Import(name="assumeRoleConditionTest")
    private @Nullable Output<String> assumeRoleConditionTest;

    /**
     * @return Name of the IAM condition operator to evaluate when assuming the role.
     * 
     */
    public Optional<Output<String>> assumeRoleConditionTest() {
        return Optional.ofNullable(this.assumeRoleConditionTest);
    }

    /**
     * Whether policies should be detached from this role when destroying.
     * 
     */
    @Import(name="forceDetachPolicies")
    private @Nullable Output<Boolean> forceDetachPolicies;

    /**
     * @return Whether policies should be detached from this role when destroying.
     * 
     */
    public Optional<Output<Boolean>> forceDetachPolicies() {
        return Optional.ofNullable(this.forceDetachPolicies);
    }

    /**
     * Maximum CLI/API session duration in seconds between 3600 and 43200.
     * 
     */
    @Import(name="maxSessionDuration")
    private @Nullable Output<Integer> maxSessionDuration;

    /**
     * @return Maximum CLI/API session duration in seconds between 3600 and 43200.
     * 
     */
    public Optional<Output<Integer>> maxSessionDuration() {
        return Optional.ofNullable(this.maxSessionDuration);
    }

    /**
     * Map of OIDC providers.
     * 
     */
    @Import(name="oidcProviders")
    private @Nullable Output<Map<String,OIDCProviderArgs>> oidcProviders;

    /**
     * @return Map of OIDC providers.
     * 
     */
    public Optional<Output<Map<String,OIDCProviderArgs>>> oidcProviders() {
        return Optional.ofNullable(this.oidcProviders);
    }

    @Import(name="policies")
    private @Nullable Output<EKSRolePoliciesArgs> policies;

    public Optional<Output<EKSRolePoliciesArgs>> policies() {
        return Optional.ofNullable(this.policies);
    }

    /**
     * IAM policy name prefix.
     * 
     */
    @Import(name="policyNamePrefix")
    private @Nullable Output<String> policyNamePrefix;

    /**
     * @return IAM policy name prefix.
     * 
     */
    public Optional<Output<String>> policyNamePrefix() {
        return Optional.ofNullable(this.policyNamePrefix);
    }

    @Import(name="role")
    private @Nullable Output<EKSServiceAccountRoleArgs> role;

    public Optional<Output<EKSServiceAccountRoleArgs>> role() {
        return Optional.ofNullable(this.role);
    }

    /**
     * A map of tags to add.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return A map of tags to add.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private RoleForServiceAccountsEksArgs() {}

    private RoleForServiceAccountsEksArgs(RoleForServiceAccountsEksArgs $) {
        this.assumeRoleConditionTest = $.assumeRoleConditionTest;
        this.forceDetachPolicies = $.forceDetachPolicies;
        this.maxSessionDuration = $.maxSessionDuration;
        this.oidcProviders = $.oidcProviders;
        this.policies = $.policies;
        this.policyNamePrefix = $.policyNamePrefix;
        this.role = $.role;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RoleForServiceAccountsEksArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RoleForServiceAccountsEksArgs $;

        public Builder() {
            $ = new RoleForServiceAccountsEksArgs();
        }

        public Builder(RoleForServiceAccountsEksArgs defaults) {
            $ = new RoleForServiceAccountsEksArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param assumeRoleConditionTest Name of the IAM condition operator to evaluate when assuming the role.
         * 
         * @return builder
         * 
         */
        public Builder assumeRoleConditionTest(@Nullable Output<String> assumeRoleConditionTest) {
            $.assumeRoleConditionTest = assumeRoleConditionTest;
            return this;
        }

        /**
         * @param assumeRoleConditionTest Name of the IAM condition operator to evaluate when assuming the role.
         * 
         * @return builder
         * 
         */
        public Builder assumeRoleConditionTest(String assumeRoleConditionTest) {
            return assumeRoleConditionTest(Output.of(assumeRoleConditionTest));
        }

        /**
         * @param forceDetachPolicies Whether policies should be detached from this role when destroying.
         * 
         * @return builder
         * 
         */
        public Builder forceDetachPolicies(@Nullable Output<Boolean> forceDetachPolicies) {
            $.forceDetachPolicies = forceDetachPolicies;
            return this;
        }

        /**
         * @param forceDetachPolicies Whether policies should be detached from this role when destroying.
         * 
         * @return builder
         * 
         */
        public Builder forceDetachPolicies(Boolean forceDetachPolicies) {
            return forceDetachPolicies(Output.of(forceDetachPolicies));
        }

        /**
         * @param maxSessionDuration Maximum CLI/API session duration in seconds between 3600 and 43200.
         * 
         * @return builder
         * 
         */
        public Builder maxSessionDuration(@Nullable Output<Integer> maxSessionDuration) {
            $.maxSessionDuration = maxSessionDuration;
            return this;
        }

        /**
         * @param maxSessionDuration Maximum CLI/API session duration in seconds between 3600 and 43200.
         * 
         * @return builder
         * 
         */
        public Builder maxSessionDuration(Integer maxSessionDuration) {
            return maxSessionDuration(Output.of(maxSessionDuration));
        }

        /**
         * @param oidcProviders Map of OIDC providers.
         * 
         * @return builder
         * 
         */
        public Builder oidcProviders(@Nullable Output<Map<String,OIDCProviderArgs>> oidcProviders) {
            $.oidcProviders = oidcProviders;
            return this;
        }

        /**
         * @param oidcProviders Map of OIDC providers.
         * 
         * @return builder
         * 
         */
        public Builder oidcProviders(Map<String,OIDCProviderArgs> oidcProviders) {
            return oidcProviders(Output.of(oidcProviders));
        }

        public Builder policies(@Nullable Output<EKSRolePoliciesArgs> policies) {
            $.policies = policies;
            return this;
        }

        public Builder policies(EKSRolePoliciesArgs policies) {
            return policies(Output.of(policies));
        }

        /**
         * @param policyNamePrefix IAM policy name prefix.
         * 
         * @return builder
         * 
         */
        public Builder policyNamePrefix(@Nullable Output<String> policyNamePrefix) {
            $.policyNamePrefix = policyNamePrefix;
            return this;
        }

        /**
         * @param policyNamePrefix IAM policy name prefix.
         * 
         * @return builder
         * 
         */
        public Builder policyNamePrefix(String policyNamePrefix) {
            return policyNamePrefix(Output.of(policyNamePrefix));
        }

        public Builder role(@Nullable Output<EKSServiceAccountRoleArgs> role) {
            $.role = role;
            return this;
        }

        public Builder role(EKSServiceAccountRoleArgs role) {
            return role(Output.of(role));
        }

        /**
         * @param tags A map of tags to add.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A map of tags to add.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public RoleForServiceAccountsEksArgs build() {
            $.assumeRoleConditionTest = Codegen.stringProp("assumeRoleConditionTest").output().arg($.assumeRoleConditionTest).def("StringEquals").getNullable();
            $.forceDetachPolicies = Codegen.booleanProp("forceDetachPolicies").output().arg($.forceDetachPolicies).def(false).getNullable();
            $.maxSessionDuration = Codegen.integerProp("maxSessionDuration").output().arg($.maxSessionDuration).def(3600).getNullable();
            $.policyNamePrefix = Codegen.stringProp("policyNamePrefix").output().arg($.policyNamePrefix).def("AmazonEKS_").getNullable();
            return $;
        }
    }

}
