// *** WARNING: this file was generated by Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsiam.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Options to specify complexity requirements and mandatory rotation periods for your IAM users&#39; passwords.
 * 
 */
public final class AccountPasswordPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final AccountPasswordPolicyArgs Empty = new AccountPasswordPolicyArgs();

    /**
     * Whether to allow users to change their own password.
     * 
     */
    @Import(name="allowUsersToChange", required=true)
    private Output<Boolean> allowUsersToChange;

    /**
     * @return Whether to allow users to change their own password.
     * 
     */
    public Output<Boolean> allowUsersToChange() {
        return this.allowUsersToChange;
    }

    /**
     * Whether users are prevented from setting a new password after their password has
     * expired (i.e. require administrator reset).
     * 
     */
    @Import(name="hardExpiry", required=true)
    private Output<Boolean> hardExpiry;

    /**
     * @return Whether users are prevented from setting a new password after their password has
     * expired (i.e. require administrator reset).
     * 
     */
    public Output<Boolean> hardExpiry() {
        return this.hardExpiry;
    }

    /**
     * The number of days that an user password is valid. If not set or a value of `0` is provided, then
     * passwords will not expire.
     * 
     */
    @Import(name="maxAge")
    private @Nullable Output<Integer> maxAge;

    /**
     * @return The number of days that an user password is valid. If not set or a value of `0` is provided, then
     * passwords will not expire.
     * 
     */
    public Optional<Output<Integer>> maxAge() {
        return Optional.ofNullable(this.maxAge);
    }

    /**
     * Minimum length to require for user passwords. Defaults to `8` if not set or
     * the provided value is invalid. Valid values are between 6 and 128.
     * 
     */
    @Import(name="minimumLength")
    private @Nullable Output<Integer> minimumLength;

    /**
     * @return Minimum length to require for user passwords. Defaults to `8` if not set or
     * the provided value is invalid. Valid values are between 6 and 128.
     * 
     */
    public Optional<Output<Integer>> minimumLength() {
        return Optional.ofNullable(this.minimumLength);
    }

    /**
     * Whether to require lowercase characters for user passwords.
     * 
     */
    @Import(name="requireLowercaseCharacters", required=true)
    private Output<Boolean> requireLowercaseCharacters;

    /**
     * @return Whether to require lowercase characters for user passwords.
     * 
     */
    public Output<Boolean> requireLowercaseCharacters() {
        return this.requireLowercaseCharacters;
    }

    /**
     * Whether to require numbers for user passwords.
     * 
     */
    @Import(name="requireNumbers", required=true)
    private Output<Boolean> requireNumbers;

    /**
     * @return Whether to require numbers for user passwords.
     * 
     */
    public Output<Boolean> requireNumbers() {
        return this.requireNumbers;
    }

    /**
     * Whether to require symbols for user passwords.
     * 
     */
    @Import(name="requireSymbols", required=true)
    private Output<Boolean> requireSymbols;

    /**
     * @return Whether to require symbols for user passwords.
     * 
     */
    public Output<Boolean> requireSymbols() {
        return this.requireSymbols;
    }

    /**
     * Whether to require uppercase characters for user passwords.
     * 
     */
    @Import(name="requireUppercaseCharacters", required=true)
    private Output<Boolean> requireUppercaseCharacters;

    /**
     * @return Whether to require uppercase characters for user passwords.
     * 
     */
    public Output<Boolean> requireUppercaseCharacters() {
        return this.requireUppercaseCharacters;
    }

    /**
     * The number of previous passwords that users are prevented from reusing. If not set or a
     * value of `0` is provided, no reuse prevention policy will be used.
     * 
     */
    @Import(name="reusePrevention")
    private @Nullable Output<Integer> reusePrevention;

    /**
     * @return The number of previous passwords that users are prevented from reusing. If not set or a
     * value of `0` is provided, no reuse prevention policy will be used.
     * 
     */
    public Optional<Output<Integer>> reusePrevention() {
        return Optional.ofNullable(this.reusePrevention);
    }

    private AccountPasswordPolicyArgs() {}

    private AccountPasswordPolicyArgs(AccountPasswordPolicyArgs $) {
        this.allowUsersToChange = $.allowUsersToChange;
        this.hardExpiry = $.hardExpiry;
        this.maxAge = $.maxAge;
        this.minimumLength = $.minimumLength;
        this.requireLowercaseCharacters = $.requireLowercaseCharacters;
        this.requireNumbers = $.requireNumbers;
        this.requireSymbols = $.requireSymbols;
        this.requireUppercaseCharacters = $.requireUppercaseCharacters;
        this.reusePrevention = $.reusePrevention;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AccountPasswordPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AccountPasswordPolicyArgs $;

        public Builder() {
            $ = new AccountPasswordPolicyArgs();
        }

        public Builder(AccountPasswordPolicyArgs defaults) {
            $ = new AccountPasswordPolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowUsersToChange Whether to allow users to change their own password.
         * 
         * @return builder
         * 
         */
        public Builder allowUsersToChange(Output<Boolean> allowUsersToChange) {
            $.allowUsersToChange = allowUsersToChange;
            return this;
        }

        /**
         * @param allowUsersToChange Whether to allow users to change their own password.
         * 
         * @return builder
         * 
         */
        public Builder allowUsersToChange(Boolean allowUsersToChange) {
            return allowUsersToChange(Output.of(allowUsersToChange));
        }

        /**
         * @param hardExpiry Whether users are prevented from setting a new password after their password has
         * expired (i.e. require administrator reset).
         * 
         * @return builder
         * 
         */
        public Builder hardExpiry(Output<Boolean> hardExpiry) {
            $.hardExpiry = hardExpiry;
            return this;
        }

        /**
         * @param hardExpiry Whether users are prevented from setting a new password after their password has
         * expired (i.e. require administrator reset).
         * 
         * @return builder
         * 
         */
        public Builder hardExpiry(Boolean hardExpiry) {
            return hardExpiry(Output.of(hardExpiry));
        }

        /**
         * @param maxAge The number of days that an user password is valid. If not set or a value of `0` is provided, then
         * passwords will not expire.
         * 
         * @return builder
         * 
         */
        public Builder maxAge(@Nullable Output<Integer> maxAge) {
            $.maxAge = maxAge;
            return this;
        }

        /**
         * @param maxAge The number of days that an user password is valid. If not set or a value of `0` is provided, then
         * passwords will not expire.
         * 
         * @return builder
         * 
         */
        public Builder maxAge(Integer maxAge) {
            return maxAge(Output.of(maxAge));
        }

        /**
         * @param minimumLength Minimum length to require for user passwords. Defaults to `8` if not set or
         * the provided value is invalid. Valid values are between 6 and 128.
         * 
         * @return builder
         * 
         */
        public Builder minimumLength(@Nullable Output<Integer> minimumLength) {
            $.minimumLength = minimumLength;
            return this;
        }

        /**
         * @param minimumLength Minimum length to require for user passwords. Defaults to `8` if not set or
         * the provided value is invalid. Valid values are between 6 and 128.
         * 
         * @return builder
         * 
         */
        public Builder minimumLength(Integer minimumLength) {
            return minimumLength(Output.of(minimumLength));
        }

        /**
         * @param requireLowercaseCharacters Whether to require lowercase characters for user passwords.
         * 
         * @return builder
         * 
         */
        public Builder requireLowercaseCharacters(Output<Boolean> requireLowercaseCharacters) {
            $.requireLowercaseCharacters = requireLowercaseCharacters;
            return this;
        }

        /**
         * @param requireLowercaseCharacters Whether to require lowercase characters for user passwords.
         * 
         * @return builder
         * 
         */
        public Builder requireLowercaseCharacters(Boolean requireLowercaseCharacters) {
            return requireLowercaseCharacters(Output.of(requireLowercaseCharacters));
        }

        /**
         * @param requireNumbers Whether to require numbers for user passwords.
         * 
         * @return builder
         * 
         */
        public Builder requireNumbers(Output<Boolean> requireNumbers) {
            $.requireNumbers = requireNumbers;
            return this;
        }

        /**
         * @param requireNumbers Whether to require numbers for user passwords.
         * 
         * @return builder
         * 
         */
        public Builder requireNumbers(Boolean requireNumbers) {
            return requireNumbers(Output.of(requireNumbers));
        }

        /**
         * @param requireSymbols Whether to require symbols for user passwords.
         * 
         * @return builder
         * 
         */
        public Builder requireSymbols(Output<Boolean> requireSymbols) {
            $.requireSymbols = requireSymbols;
            return this;
        }

        /**
         * @param requireSymbols Whether to require symbols for user passwords.
         * 
         * @return builder
         * 
         */
        public Builder requireSymbols(Boolean requireSymbols) {
            return requireSymbols(Output.of(requireSymbols));
        }

        /**
         * @param requireUppercaseCharacters Whether to require uppercase characters for user passwords.
         * 
         * @return builder
         * 
         */
        public Builder requireUppercaseCharacters(Output<Boolean> requireUppercaseCharacters) {
            $.requireUppercaseCharacters = requireUppercaseCharacters;
            return this;
        }

        /**
         * @param requireUppercaseCharacters Whether to require uppercase characters for user passwords.
         * 
         * @return builder
         * 
         */
        public Builder requireUppercaseCharacters(Boolean requireUppercaseCharacters) {
            return requireUppercaseCharacters(Output.of(requireUppercaseCharacters));
        }

        /**
         * @param reusePrevention The number of previous passwords that users are prevented from reusing. If not set or a
         * value of `0` is provided, no reuse prevention policy will be used.
         * 
         * @return builder
         * 
         */
        public Builder reusePrevention(@Nullable Output<Integer> reusePrevention) {
            $.reusePrevention = reusePrevention;
            return this;
        }

        /**
         * @param reusePrevention The number of previous passwords that users are prevented from reusing. If not set or a
         * value of `0` is provided, no reuse prevention policy will be used.
         * 
         * @return builder
         * 
         */
        public Builder reusePrevention(Integer reusePrevention) {
            return reusePrevention(Output.of(reusePrevention));
        }

        public AccountPasswordPolicyArgs build() {
            $.allowUsersToChange = Objects.requireNonNull($.allowUsersToChange, "expected parameter 'allowUsersToChange' to be non-null");
            $.hardExpiry = Objects.requireNonNull($.hardExpiry, "expected parameter 'hardExpiry' to be non-null");
            $.requireLowercaseCharacters = Objects.requireNonNull($.requireLowercaseCharacters, "expected parameter 'requireLowercaseCharacters' to be non-null");
            $.requireNumbers = Objects.requireNonNull($.requireNumbers, "expected parameter 'requireNumbers' to be non-null");
            $.requireSymbols = Objects.requireNonNull($.requireSymbols, "expected parameter 'requireSymbols' to be non-null");
            $.requireUppercaseCharacters = Objects.requireNonNull($.requireUppercaseCharacters, "expected parameter 'requireUppercaseCharacters' to be non-null");
            return $;
        }
    }

}
