// *** WARNING: this file was generated by Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsiam;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GroupWithAssumableRolesPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final GroupWithAssumableRolesPolicyArgs Empty = new GroupWithAssumableRolesPolicyArgs();

    /**
     * List of IAM roles ARNs which can be assumed by the group
     * 
     */
    @Import(name="assumableRoles", required=true)
    private Output<List<String>> assumableRoles;

    /**
     * @return List of IAM roles ARNs which can be assumed by the group
     * 
     */
    public Output<List<String>> assumableRoles() {
        return this.assumableRoles;
    }

    /**
     * List of IAM users to have in an IAM group which can assume the role
     * 
     */
    @Import(name="groupUsers", required=true)
    private Output<List<String>> groupUsers;

    /**
     * @return List of IAM users to have in an IAM group which can assume the role
     * 
     */
    public Output<List<String>> groupUsers() {
        return this.groupUsers;
    }

    /**
     * Name of IAM policy and IAM group.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Name of IAM policy and IAM group.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * A map of tags to add.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return A map of tags to add.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private GroupWithAssumableRolesPolicyArgs() {}

    private GroupWithAssumableRolesPolicyArgs(GroupWithAssumableRolesPolicyArgs $) {
        this.assumableRoles = $.assumableRoles;
        this.groupUsers = $.groupUsers;
        this.name = $.name;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GroupWithAssumableRolesPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GroupWithAssumableRolesPolicyArgs $;

        public Builder() {
            $ = new GroupWithAssumableRolesPolicyArgs();
        }

        public Builder(GroupWithAssumableRolesPolicyArgs defaults) {
            $ = new GroupWithAssumableRolesPolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param assumableRoles List of IAM roles ARNs which can be assumed by the group
         * 
         * @return builder
         * 
         */
        public Builder assumableRoles(Output<List<String>> assumableRoles) {
            $.assumableRoles = assumableRoles;
            return this;
        }

        /**
         * @param assumableRoles List of IAM roles ARNs which can be assumed by the group
         * 
         * @return builder
         * 
         */
        public Builder assumableRoles(List<String> assumableRoles) {
            return assumableRoles(Output.of(assumableRoles));
        }

        /**
         * @param assumableRoles List of IAM roles ARNs which can be assumed by the group
         * 
         * @return builder
         * 
         */
        public Builder assumableRoles(String... assumableRoles) {
            return assumableRoles(List.of(assumableRoles));
        }

        /**
         * @param groupUsers List of IAM users to have in an IAM group which can assume the role
         * 
         * @return builder
         * 
         */
        public Builder groupUsers(Output<List<String>> groupUsers) {
            $.groupUsers = groupUsers;
            return this;
        }

        /**
         * @param groupUsers List of IAM users to have in an IAM group which can assume the role
         * 
         * @return builder
         * 
         */
        public Builder groupUsers(List<String> groupUsers) {
            return groupUsers(Output.of(groupUsers));
        }

        /**
         * @param groupUsers List of IAM users to have in an IAM group which can assume the role
         * 
         * @return builder
         * 
         */
        public Builder groupUsers(String... groupUsers) {
            return groupUsers(List.of(groupUsers));
        }

        /**
         * @param name Name of IAM policy and IAM group.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of IAM policy and IAM group.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param tags A map of tags to add.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A map of tags to add.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public GroupWithAssumableRolesPolicyArgs build() {
            $.assumableRoles = Objects.requireNonNull($.assumableRoles, "expected parameter 'assumableRoles' to be non-null");
            $.groupUsers = Objects.requireNonNull($.groupUsers, "expected parameter 'groupUsers' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            return $;
        }
    }

}
