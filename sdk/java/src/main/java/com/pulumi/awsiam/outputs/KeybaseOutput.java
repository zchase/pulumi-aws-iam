// *** WARNING: this file was generated by Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsiam.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class KeybaseOutput {
    /**
     * @return Decrypt user password command.
     * 
     */
    private final @Nullable String passwordDecryptCommand;
    /**
     * @return Encrypted password
     * 
     */
    private final @Nullable String passwordPgpMessage;
    /**
     * @return Decrypt access secret key command.
     * 
     */
    private final @Nullable String secretKeyDecryptCommand;
    /**
     * @return Encrypted access secret key.
     * 
     */
    private final @Nullable String secretKeyPgpMessage;

    @CustomType.Constructor
    private KeybaseOutput(
        @CustomType.Parameter("passwordDecryptCommand") @Nullable String passwordDecryptCommand,
        @CustomType.Parameter("passwordPgpMessage") @Nullable String passwordPgpMessage,
        @CustomType.Parameter("secretKeyDecryptCommand") @Nullable String secretKeyDecryptCommand,
        @CustomType.Parameter("secretKeyPgpMessage") @Nullable String secretKeyPgpMessage) {
        this.passwordDecryptCommand = passwordDecryptCommand;
        this.passwordPgpMessage = passwordPgpMessage;
        this.secretKeyDecryptCommand = secretKeyDecryptCommand;
        this.secretKeyPgpMessage = secretKeyPgpMessage;
    }

    /**
     * @return Decrypt user password command.
     * 
     */
    public Optional<String> passwordDecryptCommand() {
        return Optional.ofNullable(this.passwordDecryptCommand);
    }
    /**
     * @return Encrypted password
     * 
     */
    public Optional<String> passwordPgpMessage() {
        return Optional.ofNullable(this.passwordPgpMessage);
    }
    /**
     * @return Decrypt access secret key command.
     * 
     */
    public Optional<String> secretKeyDecryptCommand() {
        return Optional.ofNullable(this.secretKeyDecryptCommand);
    }
    /**
     * @return Encrypted access secret key.
     * 
     */
    public Optional<String> secretKeyPgpMessage() {
        return Optional.ofNullable(this.secretKeyPgpMessage);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(KeybaseOutput defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String passwordDecryptCommand;
        private @Nullable String passwordPgpMessage;
        private @Nullable String secretKeyDecryptCommand;
        private @Nullable String secretKeyPgpMessage;

        public Builder() {
    	      // Empty
        }

        public Builder(KeybaseOutput defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.passwordDecryptCommand = defaults.passwordDecryptCommand;
    	      this.passwordPgpMessage = defaults.passwordPgpMessage;
    	      this.secretKeyDecryptCommand = defaults.secretKeyDecryptCommand;
    	      this.secretKeyPgpMessage = defaults.secretKeyPgpMessage;
        }

        public Builder passwordDecryptCommand(@Nullable String passwordDecryptCommand) {
            this.passwordDecryptCommand = passwordDecryptCommand;
            return this;
        }
        public Builder passwordPgpMessage(@Nullable String passwordPgpMessage) {
            this.passwordPgpMessage = passwordPgpMessage;
            return this;
        }
        public Builder secretKeyDecryptCommand(@Nullable String secretKeyDecryptCommand) {
            this.secretKeyDecryptCommand = secretKeyDecryptCommand;
            return this;
        }
        public Builder secretKeyPgpMessage(@Nullable String secretKeyPgpMessage) {
            this.secretKeyPgpMessage = secretKeyPgpMessage;
            return this;
        }        public KeybaseOutput build() {
            return new KeybaseOutput(passwordDecryptCommand, passwordPgpMessage, secretKeyDecryptCommand, secretKeyPgpMessage);
        }
    }
}
